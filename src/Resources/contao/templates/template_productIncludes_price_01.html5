<?php
$obj_tmp_productOrVariant = null;
if ($this->objProduct->_variantIsSelected) {
	$obj_tmp_productOrVariant = $this->objProduct->_selectedVariant;
} else {
	$obj_tmp_productOrVariant = $this->objProduct;
}
?>

<div class="priceContainer">
	<div class="currentPrice">
		<?php // unscaled price output -> ?>
		<div class="unscaledSinglePrice">
			<?php
			if (
					// we have a configuration which affects the price
					$obj_tmp_productOrVariant->_unscaledPriceModificationByConfigurator
			) {
				?>
				<div class="basePrice">
					<div class="label">
						<?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['basePrice']; ?>:
					</div>
					<div class="value">
						<?php echo $obj_tmp_productOrVariant->_unscaledPriceBeforeConfiguratorAfterTaxFormatted; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
					</div>
				</div>
				<div class="configuratorPrice">
					<div class="label">
						<?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['configuratorPrice']; ?>:
					</div>
					<div class="value">
						<?php echo $obj_tmp_productOrVariant->_unscaledPriceModificationByConfiguratorFormatted; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
					</div>
				</div>
			<?php } ?>
			<div class="finalPrice">
				<div class="label"></div>
				<div class="value">
					<?php
						/*
						 * Either a variant is selected or, if it isn't, the product does not have different variant prices. In both cases we have a precise price to display
						 */
						if ($this->objProduct->_variantIsSelected || !$this->objProduct->_unscaledPricesAreDifferent) {
							?>
							<?php echo $obj_tmp_productOrVariant->_unscaledPriceAfterTaxFormatted; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
							<div class="quantityComparison">
								<?php echo $obj_tmp_productOrVariant->_getQuantityComparisonText('_unscaledPriceAfterTax'); ?>
							</div>
							<?php
						}
						
						/*
						 * No variant is selected and the product has different variant prices which means that we have to show something like "from [minimum price]"
						 */
						else {
							?>
							<?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['from']; ?> <?php echo $obj_tmp_productOrVariant->_unscaledPriceMinimumAfterTaxFormatted; ?><?php if ($this->objProduct->_hasQuantityUnit): ?>/<?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
							<div class="quantityComparison">
								<?php echo $obj_tmp_productOrVariant->_getQuantityComparisonText('_unscaledPriceMinimumAfterTax'); ?>
							</div>
							<?php
						}
					?>
				</div>
			</div>
		</div>
		<?php // <- unscaled price output ?>
		
		<?php // scale price information -> ?>
		<?php
			if (
					(
							// we have a configuration which affects the price
							$obj_tmp_productOrVariant->_unscaledPriceModificationByConfigurator
						&&	(
									(
											// a variant is selected and either the product or the variant use scale prices and we have a price scale output array
											$this->objProduct->_variantIsSelected
										&&	($this->objProduct->_useScalePrice || $this->objProduct->_selectedVariant->_useScalePrice)
										&&	is_array($this->objProduct->_selectedVariant->_scalePricesOutput)
									)
								||	(
											// no variant is selected and the product uses scale prices and we have a price scale output array
											!$this->objProduct->_variantIsSelected
										&&	$this->objProduct->_useScalePrice
										&&	is_array($this->objProduct->_scalePricesOutput)
									)
								
							)
					)
				||	(
							// we have no configuration or the configuration doesn't affect the price
							!$obj_tmp_productOrVariant->_unscaledPriceModificationByConfigurator
						&&	(
									(
											// a variant is selected and either the product or the variant use scale prices and we have a price scale output array							
											$this->objProduct->_variantIsSelected
										&&	($this->objProduct->_useScalePrice || $this->objProduct->_selectedVariant->_useScalePrice)
										&&	is_array($this->objProduct->_selectedVariant->_scalePricesOutputUnconfigured)
									)
								||	(
											// no variant is selected and the product does not have variants, it uses scale prices and we have a price scale output array
											!$this->objProduct->_variantIsSelected
										&&	!$this->objProduct->_hasVariants
										&&	$this->objProduct->_useScalePrice
										&&	is_array($this->objProduct->_scalePricesOutputUnconfigured)
									)
								
							)
					)
			) {
				?>
				<div class="scalePriceInformation <?php echo $obj_tmp_productOrVariant->_unscaledPriceModificationByConfigurator ? 'pricesInfluencedByConfigurator' : 'pricesNotInfluencedByConfigurator'; ?>">
					<?php
					$count = 1;
					foreach ($obj_tmp_productOrVariant->_scalePricesOutput as $arrStep) {
						$count++;
						?>
						<div class="scalePriceStep <?php echo ($count % 2 ? 'odd' : 'even').($count == 1 ? ' first' : '').($count == count($obj_tmp_productOrVariant->_scalePricesOutput) + 1 ? ' last' : ''); ?>">
							<div class="scalePriceStepMinQuantity">
								<?php echo $arrStep['minQuantity']; ?>
							</div>
							<?php
							if (
								// we have a configuration which affects the price
								$obj_tmp_productOrVariant->_unscaledPriceModificationByConfigurator
							) {
								?>
								<div class="basePrice">
									<div class="label">
										<?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['basePrice']; ?>:
									</div>
									<div class="value">
										<?php echo $arrStep['priceUnconfigured']; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
									</div>
								</div>
								<div class="configuratorPrice">
									<div class="label">
										<?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['configuratorPrice']; ?>:
									</div>
									<div class="value">
										<?php echo $arrStep['priceConfigurator']; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
									</div>
								</div>
							<?php } ?>
							<div class="finalPrice">
								<div class="label"></div>
								<div class="value">
									<?php
									if (
										// we have a configuration which affects the price
										$obj_tmp_productOrVariant->_unscaledPriceModificationByConfigurator
									) {
										?>
										<?php echo $arrStep['priceConfigured']; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
										<?php
										if ($this->objProduct->_hasQuantityComparisonUnit) {
											?>
											<div class="quantityComparison">
												<?php echo $obj_tmp_productOrVariant->_getQuantityComparisonText($arrStep['priceConfiguredUnformatted']); ?>
											</div>										
											<?php
										}
										?>
									<?php } else { ?>
										<?php echo $arrStep['priceUnconfigured']; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
										<?php
										if ($this->objProduct->_hasQuantityComparisonUnit) {
											?>
											<div class="quantityComparison">
												<?php echo $obj_tmp_productOrVariant->_getQuantityComparisonText($arrStep['priceUnconfiguredUnformatted']); ?>
											</div>										
											<?php
										}
										?>
									<?php } ?>
								</div>
							</div>
						</div>
						<?php
					}
					?>				
				</div>
				<?php
			}
		?>
		<?php // <- scale price information ?>
	</div>
	

	<?php if ($obj_tmp_productOrVariant->_hasOldPrice): ?>
		<div class="oldPrice">
			<?php
				/*
				 * Either a variant is selected or, if it isn't, the product does not have different old variant prices. In both cases we have a precise old price to display
				 */
				if ($this->objProduct->_variantIsSelected || !$this->objProduct->_oldPricesAreDifferent) {
					?>
					<?php echo $obj_tmp_productOrVariant->_priceOldAfterTaxFormatted; ?><?php if ($this->objProduct->_hasQuantityUnit): ?> / <?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
					<?php
				}
				
				/*
				 * No variant is selected and the product has different old variant prices which means that we have to show something like "from [minimum old price]"
				 */
				else {
					?>
					<?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['from']; ?> <?php echo $obj_tmp_productOrVariant->_priceOldMinimumAfterTaxFormatted; ?><?php if ($this->objProduct->_hasQuantityUnit): ?>/<?php echo $this->objProduct->_quantityUnit; ?><?php endif; ?>
					<?php
				}
			?>
		</div>
	<?php endif; ?>

	<div class="taxInfo"><?php echo $obj_tmp_productOrVariant->_taxInfo; ?></div>
	<div class="shippingInfo"><?php echo $obj_tmp_productOrVariant->_shippingInfo; ?></div>
	<?php if (($obj_tmp_productOrVariant->_objConfigurator->arrData['stayInDataEntryMode'] ?? null) || !$obj_tmp_productOrVariant->_configuratorInDataEntryMode): ?>
		<?php if ($obj_tmp_productOrVariant->_orderAllowed && $obj_tmp_productOrVariant->_hasQuantityInput): ?>
			<?php echo $obj_tmp_productOrVariant->_quantityInput; ?>

			<?php
				// ####################################################################
				// message to display after putting the product/variant into the cart
				if (\Merconis\Core\ls_shop_msg::checkMsg('addedToCart', $obj_tmp_productOrVariant->_productVariantID)) { // check if an "addedToCart" message is set for this product/variant
					$msgDetails = \Merconis\Core\ls_shop_msg::getMsgDetails('addedToCart', $obj_tmp_productOrVariant->_productVariantID); // get the message details
					if ($obj_tmp_productOrVariant->_useStock && $msgDetails['stockNotSufficient']) { // check if the product/variant uses stock and if the stock was not sufficient
						?>
							<div class="hasBeenPutInCart error"><?php echo sprintf($GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['hasBeenPutInCartStockNotSufficient'], \Merconis\Core\ls_shop_generalHelper::outputQuantity($msgDetails['desiredQuantity'], $obj_tmp_productOrVariant->_quantityDecimals).' '.$obj_tmp_productOrVariant->_quantityUnit,  \Merconis\Core\ls_shop_generalHelper::outputQuantity($msgDetails['quantityPutInCart'], $obj_tmp_productOrVariant->_quantityDecimals).' '.$obj_tmp_productOrVariant->_quantityUnit); ?></div>
						<?php
					} else {
						?>
							<div class="hasBeenPutInCart"><?php echo sprintf($GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['hasBeenPutInCart'], \Merconis\Core\ls_shop_generalHelper::outputQuantity($msgDetails['quantityPutInCart'], $obj_tmp_productOrVariant->_quantityDecimals).' '.$obj_tmp_productOrVariant->_quantityUnit); ?></div>
						<?php
					}
				} else if (\Merconis\Core\ls_shop_msg::checkMsg('couldNotBePutInCart', $obj_tmp_productOrVariant->_productVariantID)) { // if no "addedToCart" message is set, check for a "couldNotBePutInCart" message for this product/variant
					?>
						<div class="notPutInCart"><?php echo $GLOBALS['TL_LANG']['MSC']['ls_shop']['misc']['couldNotBePutInCart']; ?></div>
					<?php
				}
				// ####################################################################
			?>

		<?php endif; ?>
	<?php endif; ?>
</div>

<?php # echo $this->objProduct->_priceControl; ?>